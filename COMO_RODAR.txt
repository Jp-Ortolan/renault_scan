=================================================================
              COMO RODAR O PROJETO RENAULT
=================================================================

PROJETO: Sistema de Deteccao de Defeitos em Carrocerias
=================================================================

PRIMEIRO: INSTALE AS DEPENDENCIAS
=================================================================

Se ainda nao instalou, rode:

    pip install -r requirements.txt

Isso vai instalar:
- opencv-python (visao computacional)
- numpy (arrays e operacoes matematicas)
- matplotlib (visualizacao)
- scikit-learn (machine learning)
- Pillow (processamento de imagens)
- torch (deep learning - Pytorch)
- torchvision (modelos pre-treinados)
- tqdm (barras de progresso)

NOTA: PyTorch pode levar alguns minutos para instalar!

=================================================================

SEGUNDO: VERIFIQUE AS IMPORTACOES
=================================================================

Execute para verificar se tudo esta funcionando:

    python testar_importacoes.py

Voce deve ver:
   [OK] Algoritmo Aleatorio importado com sucesso!
   [OK] Algoritmo Heuristico importado com sucesso!
   [OK] Algoritmo Deep Learning importado com sucesso!
   [OK] Processador de Dataset importado com sucesso!
   [OK] Sistema Principal importado com sucesso!

=================================================================

TERCEIRO: EXECUTE O SISTEMA PRINCIPAL
=================================================================

Execute o comando:

    python detectacao_defeitos.py

O sistema vai:
1. Mostrar as imagens disponiveis na pasta imagens_para_analisar/
2. Pedir para voce escolher qual imagem analisar
3. Executar os 3 algoritmos (Aleatorio, Heuristico, Deep Learning)
4. Mostrar os resultados de cada algoritmo
5. Gerar uma recomendacao final

=================================================================

OPCOES DISPONIVEIS NO SISTEMA:
=================================================================

- Digite um NUMERO (1-4) para analisar uma imagem especifica
- Digite 'a' para analisar TODAS as imagens de uma vez
- Digite '0' para verificar novamente a lista de imagens
- Digite 's' para sair do sistema

=================================================================

ADICIONAR SUAS PROPRIAIS IMAGENS:
=================================================================

1. Copie suas fotos de carros para a pasta: imagens_para_analisar/
2. Formatos aceitos: .jpg, .jpeg, .png, .bmp, .tiff
3. Execute o sistema novamente
4. Suas imagens aparecerao na lista!

=================================================================

EXEMPLO DE EXECUCAO:
=================================================================

$ python detectacao_defeitos.py

ESTEIRA SCAN - Sistema de Deteccao de Defeitos
==================================================
Pasta de imagens: imagens_para_analisar

IMAGENS DISPONIVEIS (4):
   1. bm.jpg
   2. bmw320.jpg
   3. carro-completo.jpeg
   4. carro-prateado-visto-de-lado-com-marcas-de-colisao-nas-portas.jpg

Opcoes:
   0. Verificar novamente
   a. Analisar TODAS as imagens
   s. Sair

Escolha uma opcao (1-4, 0, a, s): 1

============================================================
ANALISE: bm.jpg
============================================================
Dimensoes: 599x400 pixels

RESULTADOS:
   Algoritmo Aleatorio: [DEFEITO] DEFEITO
   Algoritmo Heuristico: [DEFEITO] DEFEITO
   Deep Learning (CNN): [DEFEITO] DEFEITO (Confianca: 69.4%)

CARACTERISTICAS TECNICAS (Heuristico):
   Intensidade de Bordas: 66.23
   Variacao de Intensidade: 0.263
   Threshold Bordas: 30.0
   Threshold Intensidade: 0.3

RECOMENDACAO:
   ATENCAO: Defeito detectado por maioria dos algoritmos! Verificar manualmente.

Pressione Enter para continuar...

=================================================================

ESTRUTURA DO PROJETO:
=================================================================

projeto_renault/
├── detectacao_defeitos.py          # SISTEMA PRINCIPAL - Execute este!
├── testar_importacoes.py           # Teste de importacoes
├── requirements.txt                 # Dependencias
│
├── imagens_para_analisar/          # Coloque suas imagens aqui!
│   ├── bm.jpg
│   ├── bmw320.jpg
│   ├── carro-completo.jpeg
│   └── carro-prateado-visto-de-lado-com-marcas-de-colisao-nas-portas.jpg
│
└── src/
    ├── algoritmos_deteccao.py      # Algoritmos Aleatorio + Heuristico
    ├── deep_learning.py            # Deep Learning (CNN + ResNet18)
    └── preprocessamento_dataset.py # Importacao e formatacao de dados

=================================================================

COMANDOS RAPIDOS:
=================================================================

# Instalar dependencias
pip install -r requirements.txt

# Testar importacoes
python testar_importacoes.py

# Rodar o sistema
python detectacao_defeitos.py

=================================================================

DICAS:
=================================================================

1. O Deep Learning usa pesos aleatorios se nao houver modelo treinado
2. Para ter resultados melhores, treine o modelo com um dataset real
3. Os algoritmos Aleatorio e Heuristico sempre funcionam
4. O sistema funciona em CPU, mas GPU e mais rapido para Deep Learning

=================================================================

PROBLEMAS COMUNS:
=================================================================

AVISO: "failed to locate pyvenv.cfg"
EXPLICACAO: Isso e NORMAL e pode ser ignorado!
SOLUCAO: Nenhuma acao necessaria, o projeto funciona normalmente

ERRO: "No module named cv2"
SOLUCAO: pip install opencv-python

ERRO: "No module named torch"
SOLUCAO: pip install torch torchvision

ERRO: "Nenhuma imagem encontrada"
SOLUCAO: Copie imagens para imagens_para_analisar/

AVISO: "Deep Learning nao disponivel"
SOLUCAO: Instale PyTorch com: pip install torch torchvision

=================================================================

PRONTO! AGORA VOCE PODE USAR O SISTEMA!
=================================================================

Execute: python detectacao_defeitos.py

=================================================================
